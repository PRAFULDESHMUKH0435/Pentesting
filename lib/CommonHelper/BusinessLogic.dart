import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:hive/hive.dart';
import 'package:pentesting/Models/UserRegistrationModel.dart';
import 'package:pentesting/Models/ItemsModel.dart';
import 'package:pentesting/Providers/ProfileProvider.dart';
import 'package:pentesting/Screens/HomeScreen.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;

class BusinessLogic {

  List fruitslist = [];
  List vegetableslist = [];
  List  userdatalist=[];
  String username="";
  String useremail="";
  String userphone="";
  String useraddress="";
  String userpassword="";
  String imageurl="";
  int orderhistorylistlength=0;
  var orderhistorylist=[];
  int temp=0;
  var cartbox = Hive.box("CartItemsBox");
  String name ="";
  String email ="";
  String phone ="";
  String address ="";
  String password ="";
  List quotes =[];

    SaveUserDataToHiveDataBase(UserRegsitrationModel userregistrationmodel) async{
        var box =await Hive.openBox("UserDataBox");
        box.clear();
        box.add(userregistrationmodel);
        print("User Data Model Is : ${userregistrationmodel}");
        print("SAVED DATA TO USER DATA BOX IS ${userregistrationmodel.username},${userregistrationmodel.useremail},${userregistrationmodel.userphone},${userregistrationmodel.useraddress},${userregistrationmodel.userpassword}");
    }




   Future LoadData(String path) async{
    final fruitsbox = await Hive.box("FruitsItemsBox");
    final vegetablebox = await Hive.box("VegetableItemsBox");
    fruitslist = fruitsbox.toMap().values.toList();
    vegetableslist = vegetablebox.toMap().values.toList();
    print("Initial fruitslist length is ${fruitslist.length} and Initial vegetableslist is ${vegetableslist.length}");
    if(fruitslist.isNotEmpty && vegetableslist.isNotEmpty){
      return;
    }

   try{
     final  response =await rootBundle.loadString(path);
     var data =await jsonDecode(response);
     for(Map<String,dynamic> i in data){
           ItemsModel im = new ItemsModel(
             productname:i['productname'].toString(),
             productimage: i['productimage'].toString(),
             productprice: i['productprice'].toString(),
             productdescription: i['productdescription'].toString(),
           );
           if(path=="Assets/Json/Fruits.json"){
             fruitslist.add([im.productname,im.productimage,im.productprice,im.productdescription]);
             fruitsbox.add([im.productname,im.productimage,im.productprice,im.productdescription]);
             print("FruitsList LENGTH IS ${fruitslist.length}  And Items Are ${fruitslist}");
           }else{
             vegetableslist.add([im.productname,im.productimage,im.productprice,im.productdescription]);
             vegetablebox.add([im.productname,im.productimage,im.productprice,im.productdescription]);
             print("VegetablesList LENGTH IS ${vegetableslist.length}  And Items Are ${vegetableslist}");
           }
     }
     // var box =await Hive.openBox("ItemsBox");
   }catch(e){
     print("EXCEPTION CAUGHT :${e.toString()}");
   }

    fruitslist = fruitsbox.toMap().values.toList();
    vegetableslist = vegetablebox.toMap().values.toList();
    print("Final fruitslist length is ${fruitslist.length} and Final  vegetableslist is ${vegetableslist.length}");
  }

  CreateAndSaveUser(model,context) async{
      final auth  = await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: model.useremail,
          password: model.userpassword).then((value) async {
            /// USER CREATED IN AUTH NOW SAVING USER INFORMATION TO FIRESTORE
                String? uid = await FirebaseAuth.instance.currentUser?.uid;
                final firestore = await FirebaseFirestore.instance.collection("Users")
                             .doc(uid)
                             .set({
                                      "username": model.username,
                                      "useremail": model.useremail,
                                      "userphone": model.userphone,
                                      "useraddress": model.useraddress,
                                      "userpassword": model.userpassword,
                                      "userid": uid,
                                      "userimage":"https://cdn.pixabay.com/photo/2018/08/28/12/41/avatar-3637425_640.png"
                             }).then((value){
                                   print("User Saved Successfully In FireStore");
                                   SaveUserDataToHiveDataBase(model);
                                   ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("User Created  Successfully")));
                                   Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>HomeScreen()), (route) => false);
                             }).onError((error, stackTrace){
                                   print("Error Occured In FireStore ${error.toString()}");
                                   ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Error Occured ${error.toString()}")));
                                   Navigator.pop(context);
                            });
            ///
          }).onError((error, stackTrace){
             print("User Not Created And Exception Occurred In Authentication ${error.toString()}");
             String msg ="Invalid UserName Or Password";
             if(model.userpassword.length<7){
               msg="Password Should Be More Than 5 Digits";
             }
             ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
             Navigator.pop(context);
             return ;
          });
  }


  GetUserNameFromSP() async{
     SharedPreferences sp = await SharedPreferences.getInstance();
     return sp.get("UserName");
  }
  Future GetUserData(context) async {
    final profileprovider = Provider.of<ProfileProvider>(context);
    var box = await Hive.box("UserDataBox");
    userdatalist =await box.toMap().values.toList();
    print("User Data List Is ${userdatalist}");
    // profileprovider.username=userdatalist[0];
    if(userdatalist.length==1){
      print("USER DATA LIST FILLED");
    }
    username=userdatalist[0].username;
    useremail=userdatalist[0].useremail;
    userphone=userdatalist[0].userphone;
    useraddress=userdatalist[0].useraddress;
    userpassword=userdatalist[0].userpassword;

    print("Username Before Adding To SharedPreferences Is ${username}");
    final SharedPreferences sp = await SharedPreferences.getInstance();
    sp.setString("UserName", username);
    return userdatalist;
  }





  SaveOrderHistory(String date,double totalamount,double discount,double payable,List itemslist) async{
    var box =await Hive.openBox("OrdersHistoryBox");
    orderhistorylist = box.toMap().values.toList();
    // box.clear();
    // orderhistorylist.clear();
    print("Old Order History List Is ${orderhistorylist}");
    orderhistorylist.add([date,totalamount,discount,payable,itemslist]);
    box.add([date,totalamount,discount,payable,itemslist]);
    // box.clear();
    // orderhistorylist.clear();
    print("Newly Formed List Is ${box.toMap().values.toList()}");
  }


   GetOrderHistoryLength() async{
    var box =await Hive.openBox("OrdersHistoryBox");
    orderhistorylistlength =  box.toMap().values.toList().length;
    print("Order History List Length Is ${orderhistorylistlength}");
  }


  GetOrderHistoryList() async{
    var box =await Hive.openBox("OrdersHistoryBox");
    orderhistorylist =  box.toMap().values.toList();
    print("Order History List  Is ${orderhistorylist}");
  }

  ClearCartItems()async{
    var mybox =await Hive.openBox("CartItemsBox");
    var cartitemslist = mybox.toMap().values.toList();
    mybox.clear();
    cartitemslist.clear();
    print("Cart Items Are Cleared");
  }


  GetCartCount() async{
    temp = await cartbox.toMap().values.length;
    print("CartQuantity Is ${temp}");
    return temp;
  }


}