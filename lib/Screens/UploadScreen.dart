import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

class UploadFileScreen extends StatefulWidget {
  @override
  _UploadFileScreenState createState() => _UploadFileScreenState();
}

class _UploadFileScreenState extends State<UploadFileScreen> {
  File? _file;
  String _filePath = '';
  bool _uploading = false;
  double _uploadProgress = 0.0;
  final databaseReference = FirebaseDatabase.instance.reference();

  Future<void> _uploadFile() async {
    setState(() {
      _uploading = true;
      _uploadProgress = 0.0;
    });

    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _file = File(pickedFile.path);
      });

      try {
        final UploadTask uploadTask = FirebaseStorage.instance
            .ref()
            .child('attachments/${DateTime.now().millisecondsSinceEpoch}')
            .putFile(_file!);

        uploadTask.snapshotEvents.listen((event) {
          final progress = event.bytesTransferred / event.totalBytes;
          setState(() {
            _uploadProgress = progress;
          });
        });

        await uploadTask;
        final url = await uploadTask.snapshot.ref.getDownloadURL();

        setState(() {
          _filePath = url;
          _uploading = false;
        });

        // Save file path to Realtime Database
        databaseReference.child('attachments').push().set({
          'file_path': url,
        });
      } catch (e) {
        print('Error uploading file: $e');
        setState(() {
          _uploading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to upload file: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Upload File Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _uploading ? null : _uploadFile,
              child: Text('Choose File'),
            ),
            SizedBox(height: 20),
            _uploading
                ? Column(
              children: [
                CircularProgressIndicator(value: _uploadProgress),
                SizedBox(height: 10),
                Text(
                  'Uploading ${(_uploadProgress * 100).toStringAsFixed(2)}%',
                  style: TextStyle(fontSize: 16),
                ),
              ],
            )
                : SizedBox(),
            SizedBox(height: 20),
            _file != null
                ? Image.file(
              _file!,
              height: 200,
            )
                : SizedBox(),
            SizedBox(height: 20),
            _filePath.isNotEmpty
                ? Text(
              'File Path: $_filePath',
              style: TextStyle(fontSize: 16),
            )
                : SizedBox(),
          ],
        ),
      ),
    );
  }
}