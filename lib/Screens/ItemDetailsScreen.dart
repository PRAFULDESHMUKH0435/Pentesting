import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:pentesting/CommonHelper/ScaffoldDialog.dart';
import 'package:pentesting/Models/CartModel.dart';
import 'package:pentesting/Providers/CartProvider.dart';
import 'package:pentesting/Screens/CartScreen.dart';
import 'package:provider/provider.dart';
import 'package:badges/badges.dart' as badge;

class ItemDetailsScreen extends StatefulWidget {
  String productname;
  String productimageurl;
  String productprice;
  String productdescription;
  ItemDetailsScreen({required this.productname,required this.productimageurl,required this.productprice,required this.productdescription});

  @override
  State<ItemDetailsScreen> createState() => _ItemDetailsScreenState();

}

class _ItemDetailsScreenState extends State<ItemDetailsScreen> {
  int defaultvalue = 3;
  String quantity="50Gram";
  double unitprice=0.0;
  List itemsquantity = [3,6,9,12];
  CartProvider cartProvider = CartProvider();
  CommonHelper ch = CommonHelper();

  @override
  Widget build(BuildContext context) {
    unitprice = (double.parse(widget.productprice)/12).toInt()*defaultvalue.toDouble();
    print("Unit Price Is ${unitprice}");
    final cp = Provider.of<CartProvider>(context);
    return Scaffold(
        appBar: AppBar(
          title: Text("Product OverView "),
          actions: [
            InkWell(
              onTap: (){
                Navigator.push(context, MaterialPageRoute(builder: (context)=>MyCartScreen()));
              },
              child: badge.Badge(
                child: Icon(Icons.shopping_cart_outlined),
                badgeContent: Text(cp.GetCartCount().toString()),
                position: badge.BadgePosition.topEnd(
                  top: -18,
                  end: -15
                ),
              ),
            ),
            SizedBox(width: 15,)
          ],
        ),
        body: Container(
          margin: EdgeInsets.symmetric(horizontal: 8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              ListTile(
                title: Text("${widget.productname}",style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold),),
                subtitle: Text('Rs.${unitprice.toInt()}',style: TextStyle(fontSize: 22,fontWeight: FontWeight.w400,color: Colors.green),),
              ),
              Container(
                  height: 150,
                  child: Center(child: CachedNetworkImage(imageUrl: widget.productimageurl,fit: BoxFit.fill,filterQuality: FilterQuality.high,height: 200))),
              Padding(
                padding: const EdgeInsets.only(left: 8.0,top: 5.0),
                child: Text('Available Options',style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold),),
              ),
              /// NEED TO CHANGE THIS
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                    Text("${defaultvalue} Items",style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold),),
                    DropdownButton(
                        items: itemsquantity.map((e) => DropdownMenuItem(
                            value: e.toString(),
                            child: Text(e.toString()))).toList(),
                        onChanged: (newval){
                          setState(() {
                            defaultvalue=int.parse(newval.toString());
                            unitprice = (double.parse(widget.productprice)/12).toInt()*defaultvalue.toDouble();
                          });
                        }),
              ],),

              Text('About This Product',style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold),),
              Expanded(
                  child: Padding(
                      padding: EdgeInsets.symmetric(vertical: 5.0),
                      child: Text(widget.productdescription,style: TextStyle(fontSize: 18),)))
            ],
          ),
        ),
        bottomNavigationBar: InkWell(
          onTap: () {
            List alreadypresentInCartList=[];
            var temp = cartProvider.GetCartItemsList().map((e){
              alreadypresentInCartList.add(e.ItemName);
            }).toList();
            print("Already Present Items Are : ${alreadypresentInCartList}");
            print("Current Item Is ${widget.productname} ");
            if(alreadypresentInCartList.contains(widget.productname)){
              ch.ShowDialog(context,"${widget.productname} Already Present In Cart",Colors.red,Icons.clear_rounded);
            }else{
              AddItem();
              setState(() {});
            }
          },
          child: Container(
            height: 50,
            margin: EdgeInsets.symmetric(horizontal: 14.0,vertical: 5.0),
            decoration: BoxDecoration(
                color: Colors.red,
                borderRadius: BorderRadius.circular(14.0)
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(Icons.shopping_bag_outlined,color: Colors.white70,),
                SizedBox(width: 5,),
                Text('Add To Cart',style: TextStyle(color: Colors.white70,fontSize: 20,fontWeight: FontWeight.bold),)
              ],),
          ),
        ),
    );
  }



  void AddItem() {
    /// ADD ITEM TO CART MODEL AND SAVE TO LOCAL HIVE DATABASE
    double singleitemprice = double.parse(widget.productprice)/12;
    print("Item Count Is ${defaultvalue}");
    print("Total Item Price Is ${unitprice}");


    CartModel cartModel = new CartModel(
        ItemName: widget.productname,
        ItemInitialPrice:(singleitemprice).toString(),
        ItemImgUrl: widget.productimageurl,
        ItemQuantity: defaultvalue.toString(),
        ItemTotalPrice: unitprice.toString()
    );


    /// ADD CartModel To Hive DataBase
    cartProvider.AddItemToCart(cartModel);
    ch.ShowDialog(context,"${widget.productname} Successfully Added To Cart",Colors.green,Icons.check);
  }
}


