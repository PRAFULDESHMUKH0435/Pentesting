import 'package:another_carousel_pro/another_carousel_pro.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:pentesting/CommonHelper/BusinessLogic.dart';
import 'package:pentesting/CommonHelper/Drawer.dart';
import 'package:pentesting/CommonHelper/SingleHomeScreenContainer.dart';
import 'package:pentesting/Providers/CartProvider.dart';
import 'package:pentesting/Screens/ProfileScreen.dart';
import 'package:pentesting/Theme/ThemeProvider.dart';
import 'package:provider/provider.dart';
import '../CommonHelper/Constants.dart';
import '../CommonHelper/ReUsableRow.dart';
import 'package:badges/badges.dart' as badge;
import 'CartScreen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {

  BusinessLogic bl = BusinessLogic();

  @override
  Widget build(BuildContext context) {
    final pro = Provider.of<ThemeProvider>(context);
    final cp = Provider.of<CartProvider>(context);
    bl.GetUserName();
    return Scaffold(
      drawer: MyDrawer(),
      appBar: AppBar(
        title: Text("Kirana",style: titlestyle,),
        actions: [
          InkWell(
            onTap: (){
              Navigator.push(context, MaterialPageRoute(builder: (context)=>MyCartScreen()));
            },
            child: badge.Badge(
              child: Icon(Icons.shopping_cart_outlined),
              badgeContent: Text(cp.cartQuantity.toString()),
            ),
          ),
         SizedBox(width: 5,),
         IconButton(onPressed: (){
           pro.istoggle=!pro.istoggle;
          Provider.of<ThemeProvider>(context).toggleTheme();
         }, icon: Provider.of<ThemeProvider>(context).istoggle?Icon(Icons.toggle_on_outlined): Icon(Icons.toggle_off_outlined)),
        ],
      ),
      body: Container(
        // color: Colors.grey,
        margin: EdgeInsets.symmetric(horizontal: 5.0,vertical: 5.0),
        child: ListView(
          children: [
            /// BANNER CONTAINER
            Container(
                height: 250,
                child: AnotherCarousel(
                  boxFit: BoxFit.fill,
                  borderRadius: true,
                  images: [
                    CachedNetworkImage(imageUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTdWNVWIM5aDGV_r5Nwsvph996CASpbw6Fmgw&usqp=CAU',fit: BoxFit.fill,),
                    CachedNetworkImage(imageUrl: 'https://www.icoderzsolutions.com/blog/wp-content/uploads/2019/05/Grocery-App-An-Assured-Way-To-Grow-Your-Grocery-Business.jpg',fit: BoxFit.fill,),
                    CachedNetworkImage(imageUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT4VLZiAzxkXGCst1EIsiW5PGEogX6Sw7yIc8WEXAOB96uwZIQrMS5Z0S_9smaiRP7k_18&usqp=CAU',fit: BoxFit.fill,),
                  ],
                )
            ),
            /// GRID VIEW
            Container(
              child: Column(
                children: [
                  /// FRUITS ROW
                  ReUsableTitleContainer(ItemTitle: 'Fruits',flag: 0,),
                  Container(
                    height: 200,
                    width: double.infinity,
                    child: FutureBuilder(
                        future: bl.LoadData("Assets/Json/Fruits.json"),
                        builder: (context,snapshot){
                          if(snapshot.hasError){
                            return Center(child: Text("Error Reading Data , Please Check Internet Connection"));
                          }else if(snapshot.connectionState==ConnectionState.waiting){
                            return SpinKitHourGlass(color: Colors.white);
                          }else{
                            return ListView.builder(
                                scrollDirection: Axis.horizontal,
                                itemCount: 3,
                                itemBuilder: (context,index){
                                  return SingleHomeScreenItemContainer(bl.fruitslist[index][0], bl.fruitslist[index][1],bl.fruitslist[index][2],bl.fruitslist[index][3]);
                                });
                          }
                        }),
                  ),
                  SizedBox(height: 20,),
                  /// VEGETABLES ROW
                  ReUsableTitleContainer(ItemTitle: 'Vegetables',flag: 1,),
                  Container(
                    height: 200,
                    width: double.infinity,
                    child: FutureBuilder(
                        future: bl.LoadData("Assets/Json/vegetables.json"),
                        builder: (context,snapshot){
                          if(snapshot.hasError){
                            return Center(child: Text("Error Reading Data , Please Check Internet Connection"));
                          }else if(snapshot.connectionState==ConnectionState.waiting){
                            return SpinKitHourGlass(color: Colors.white);
                          }else{
                            return ListView.builder(
                                scrollDirection: Axis.horizontal,
                                itemCount: 3,
                                itemBuilder: (context,index){
                                  return SingleHomeScreenItemContainer(bl.vegetableslist[index][0], bl.vegetableslist[index][1],bl.vegetableslist[index][2],bl.vegetableslist[index][3]);
                                });
                          }
                        }),
                  ),
                ],
              ),
            )
          ],
        ),
      ),
    );
  }

   showBackPressedDialog() async{
    bool backpressed = await showDialog(context: context,
        builder: (context){
          return AlertDialog(
            title: Text("Exit ?"),
            content: Text("Are You Sure You Want To Exit ?"),
            actions: [
              OutlinedButton(onPressed: (){}, child: Text("No")),
              OutlinedButton(onPressed: (){}, child: Text("Yes")),
            ],
          );
        });
    return backpressed??false;
  }
}


