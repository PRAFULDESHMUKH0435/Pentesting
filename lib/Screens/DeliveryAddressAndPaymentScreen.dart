import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hive/hive.dart';
import 'package:pentesting/CommonHelper/Phone_Dialer.dart';
import 'package:pentesting/Models/UserRegistrationModel.dart';
import 'package:pentesting/Providers/CartProvider.dart';
import 'package:pentesting/Screens/PaymentSuccessScreen.dart';
import 'package:pentesting/Screens/RazorPay.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';
import '../CommonHelper/BusinessLogic.dart';
import '../CommonHelper/Constants.dart';



class DeliveryAddressAndPaymentScreen extends StatefulWidget {
   double totalamount;
   DeliveryAddressAndPaymentScreen({required this.totalamount});

  @override
  State<DeliveryAddressAndPaymentScreen> createState() => _DeliveryAddressAndPaymentScreenState();
}

class _DeliveryAddressAndPaymentScreenState extends State<DeliveryAddressAndPaymentScreen> {


  List  userdatalist=[];
  List cartitemslist =[];
  BusinessLogic bl = BusinessLogic();
  CartProvider cp = CartProvider();
  Razorpay? _razorpay = Razorpay();
  RazorPayPayment payment = RazorPayPayment();
  String paymentmode = "Cash On Delivery";
  SocialMediaHandles socialMediaHandles = SocialMediaHandles();

  ValueNotifier  valueNotifier = ValueNotifier<String>("Cash On Delivery");


  @override
  void initState() {
    super.initState();
    // _razorpay = Razorpay();
    // _razorpay?.on(Razorpay.EVENT_PAYMENT_SUCCESS, payment.handlePaymentSuccess);
    // _razorpay?.on(Razorpay.EVENT_PAYMENT_ERROR, payment.handlePaymentError);
    // _razorpay?.on(Razorpay.EVENT_EXTERNAL_WALLET, payment.handleExternalWallet);
    GetUserData();
  }


  @override
  Widget build(BuildContext context) {
    print("Received Amount Is ${widget.totalamount}");
    cartitemslist = cp.GetCartItemsList();
    print("CartItems Is ${cartitemslist}");
    double fivepercent =(5*widget.totalamount)/100;
    print("Five Percent Is ${fivepercent}");



    return Scaffold(
      appBar: AppBar(
        title: Text("Payment Summary"),
      ),
      body: ListView(
        children: [
          /// Address Container
          FutureBuilder(
              future: GetUserData(),
              builder: (context,snapshot){
                if(snapshot.connectionState==ConnectionState.waiting){
                  return SpinKitHourGlass(color: Colors.white);
                }else{
                  return Container(
                    margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
                    decoration: BoxDecoration(
                        color: Colors.red.shade500,
                        borderRadius: BorderRadius.circular(14.0)
                    ),
                    child: Column(
                      children: [
                        ListTile(
                          title: Text("UserName"),
                          subtitle: Text(userdatalist[0].username),
                          leading: Icon(Icons.person_outline),
                        ),
                        ListTile(
                          leading: Icon(Icons.location_city_outlined),
                          title: Text("Address"),
                          subtitle: Text(userdatalist[0].useraddress),
                        ),
                        ListTile(
                          title: Text(userdatalist[0].userphone),
                          leading: Icon(Icons.phone_outlined),
                          onTap: (){
                            socialMediaHandles.openDialPad("919359407730");
                          },
                        )
                      ],
                    ),
                  );
                }
              }),
          /// Delivery Container
           Container(
            height: 200,
            margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(14.0),
              color: Colors.green
            ),
            child: Column(
              children: [
                ListTile(
                  title:const Text("Total Amount :",style: amountstyle,),
                  trailing: Text("${widget.totalamount}",style: subamountstyle,),
                ),
                ListTile(
                  title:const Text("Discount :",style: amountstyle,),
                  trailing: Text("(5%) ${fivepercent}",style: subamountstyle),
                ),
                ListTile(
                  title:const Text(" Payable :",style: amountstyle,),
                  trailing: Text("${widget.totalamount-fivepercent}",style: subamountstyle),
                ),
              ],
            ),
          ),
          ///Pay Online and Cash On Delivery Container

        ],
      ),
      /// Proceed To Payment Button
      bottomNavigationBar: InkWell(
        onTap: (){
          try{
            payment.openPaymentPortal();
          }catch(e){
            print(e.toString());
          }finally{
            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context)=>PaymentSuccessScreen()));
          }
        },


        child: Container(
          height: 50,
          decoration: BoxDecoration(
            // color: Colors.red,
            borderRadius: BorderRadius.circular(14.0),
            gradient: LinearGradient(colors: [Colors.red,Colors.green,Colors.red])
          ),
          margin: EdgeInsets.symmetric(horizontal: 14.0,vertical: 5.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Text("Proceed To Payment",style: TextStyle(fontSize: 20,fontWeight: FontWeight.bold,color: Colors.white),),
              Icon(Icons.currency_rupee,size: 30,color: Colors.white,),
            ],
          ),
        ),
      ),
    );
  }




  Future GetUserData() async {
    var box = await Hive.openBox("UserDataBox");
    userdatalist = box.toMap().values.toList();
    if(userdatalist.isEmpty){
        UserRegsitrationModel um = new UserRegsitrationModel(
            username: "Null",
            useremail: "Null",
            userphone: "Null",
            useraddress: "Null",
            userpassword: "Null");
        print("Empty Data Added");
        userdatalist.add(um);
    }
    print("UserDataModel Is${userdatalist[0].username}");
  }
}
