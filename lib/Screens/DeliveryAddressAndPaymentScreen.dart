import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hive/hive.dart';
import 'package:path/path.dart';
import 'package:pentesting/CommonHelper/Phone_Dialer.dart';
import 'package:pentesting/Models/UserRegistrationModel.dart';
import 'package:pentesting/Providers/CartProvider.dart';
import 'package:pentesting/Screens/PaymentSuccessScreen.dart';
import 'package:pentesting/Screens/RazorPay.dart';
import 'package:provider/provider.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';
import '../CommonHelper/BusinessLogic.dart';
import '../CommonHelper/Constants.dart';
import 'HomeScreen.dart';


class DeliveryAddressAndPaymentScreen extends StatefulWidget {
   double totalamount;
   DeliveryAddressAndPaymentScreen({required this.totalamount});

  @override
  State<DeliveryAddressAndPaymentScreen> createState() => _DeliveryAddressAndPaymentScreenState();
}

class _DeliveryAddressAndPaymentScreenState extends State<DeliveryAddressAndPaymentScreen> {


  List  userdatalist=[];
  List cartitemslist =[];
  BusinessLogic bl = BusinessLogic();
  CartProvider cp = CartProvider();
  Razorpay? _razorpay = Razorpay();
  RazorPayPayment payment = RazorPayPayment();
  String paymentmode = "Cash On Delivery";
  SocialMediaHandles socialMediaHandles = SocialMediaHandles();
  String name ="testuser..";
  String email ="testuser";
  String phone ="testuser..";
  String address ="testuser";
  String password ="testuser";

  ValueNotifier  valueNotifier = ValueNotifier<String>("Cash On Delivery");


  @override
  void initState() {
    super.initState();
    GetDataFromFireStore();
  }


  @override
  Widget build(BuildContext context) {
    final cp = Provider.of<CartProvider>(context);
    print("Received Amount Is ${widget.totalamount}");
    cartitemslist = cp.GetCartItemsList();
    print("CartItemsList  Is ${cartitemslist}");
    double fivepercent =(5*widget.totalamount)/100;
    print("Five Percent Is ${fivepercent}");
    return Scaffold(
      appBar: AppBar(
        title: Text("Payment Summary"),
      ),
      body: ListView(
        children: [
          /// Address Container
          FutureBuilder(
              future: GetUserData(),
              builder: (context,snapshot){
                if(snapshot.connectionState==ConnectionState.waiting){
                  return SpinKitHourGlass(color: Colors.white);
                }else{
                  return Container(
                    margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
                    decoration: BoxDecoration(
                        color: Colors.red.shade500,
                        borderRadius: BorderRadius.circular(14.0)
                    ),
                    child: Column(
                      children: [
                        ListTile(
                          title: Text("UserName"),
                          subtitle: Text(name),
                          leading: Icon(Icons.person_outline),
                        ),
                        ListTile(
                          leading: Icon(Icons.location_city_outlined),
                          title: Text("Address"),
                          subtitle: Text(address),
                        ),
                        ListTile(
                          title: Text(phone),
                          leading: Icon(Icons.phone_in_talk_rounded),
                          onTap: (){
                            socialMediaHandles.openDialPad("919359407730");
                          },
                          trailing: Icon(Icons.phone_android_outlined),
                        )
                      ],
                    ),
                  );
                }
              }),
          /// Delivery Container
           Container(
            height: 200,
            margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(14.0),
              color: Colors.green
            ),
            child: Column(
              children: [
                ListTile(
                  title:const Text("Total Amount :",style: amountstyle,),
                  trailing: Text("${widget.totalamount}",style: subamountstyle,),
                ),
                ListTile(
                  title:const Text("Discount :",style: amountstyle,),
                  trailing: Text("(5%) ${fivepercent}",style: subamountstyle),
                ),
                ListTile(
                  title:const Text(" Payable :",style: amountstyle,),
                  trailing: Text("${widget.totalamount-fivepercent}",style: subamountstyle),
                ),
              ],
            ),
          ),
          ///Pay Online and Cash On Delivery Container
        ],
      ),
      /// Proceed To Payment Button
      bottomNavigationBar: InkWell(
        onTap: () async{
          try{

            DateTime dt = DateTime.now();
            await payment.openPaymentPortal(context,dt,widget.totalamount,fivepercent,cartitemslist);

            Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>HomeScreen()), (route) => false);
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Your Order Has Been Placed Successfully")));
            await bl.SaveOrderHistory(("${dt.day} /${dt.month} /${dt.year}"),widget.totalamount,fivepercent,(widget.totalamount-fivepercent),cartitemslist);
            cp.ClearCartItemsPro();


          }catch(e){
            print(e.toString());
          }
          // setState(() {});
        },
        child: Container(
          height: 50,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(14.0),
            gradient: LinearGradient(colors: [Colors.red,Colors.green,Colors.red])
          ),
          margin: EdgeInsets.symmetric(horizontal: 14.0,vertical: 5.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Text("Proceed To Payment",style: TextStyle(fontSize: 20,fontWeight: FontWeight.bold,color: Colors.white),),
              Icon(Icons.currency_rupee,size: 30,color: Colors.white,),
            ],
          ),
        ),
      ),
    );
  }


  GetDataFromFireStore() async {
    String? uid = await FirebaseAuth.instance.currentUser?.uid.toString();
    var data = await FirebaseFirestore.instance.collection("Users").doc(uid).get();
    var box = await Hive.openBox("UserDataBox");
    print("User Data In Payment Summary Screen Is: ");
    setState(() {
      name = data.get("username");
      email = data.get("useremail");
      phone = data.get("userphone");
      address = data.get("useraddress");
      password = data.get("userpassword");
    });
  }

  Future GetUserData() async {
    var box = await Hive.openBox("UserDataBox");
    userdatalist = box.toMap().values.toList();
    if(userdatalist.isEmpty){
        UserRegsitrationModel um = new UserRegsitrationModel(
            username: "Null",
            useremail: "Null",
            userphone: "Null",
            useraddress: "Null",
            userpassword: "Null");
        print("Empty Data Added");
        userdatalist.add(um);
    }
    print("UserDataModel Is${userdatalist[0].username}");
  }
}
