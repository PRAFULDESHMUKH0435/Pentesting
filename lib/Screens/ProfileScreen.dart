import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hive/hive.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pentesting/CommonHelper/BusinessLogic.dart';
import 'dart:io';

class ProfileScreen extends StatefulWidget {
  ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {


  @override
  void initState() {
    // TODO: implement initState
    GetDataFromFireStore();
    super.initState();
  }


  BusinessLogic bl = BusinessLogic();

  File? _photo;
  File? _file;
  String _filePath = '';
  bool _uploading = false;
  double _uploadProgress = 0.0;
  final databaseReference = FirebaseDatabase.instance.reference();
  String name ="testuser";
  String email ="testuser";
  String phone ="testuser";
  String address ="testuser";
  String password ="testuser";


  Future<void> _uploadFile() async {
    setState(() {
      _uploading = true;
      _uploadProgress = 0.0;
    });

    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _file = File(pickedFile.path);
      });

      try {
        final UploadTask uploadTask = FirebaseStorage.instance
            .ref()
            .child('attachments/${DateTime.now().millisecondsSinceEpoch}')
            .putFile(_file!);

        uploadTask.snapshotEvents.listen((event) {
          final progress = event.bytesTransferred / event.totalBytes;
          setState(() {
            _uploadProgress = progress;
          });
        });

        await uploadTask;
        final url = await uploadTask.snapshot.ref.getDownloadURL();

        setState(() {
          _filePath = url;
          _uploading = false;
        });

        // Save file path to Realtime Database
        databaseReference.child('attachments').push().set({
          'file_path': url,
        });
      } catch (e) {
        print('Error uploading file: $e');
        setState(() {
          _uploading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to upload file: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    print("List From Business Layer Is ${bl.userdatalist}");
    return Scaffold(
      appBar: AppBar(
        title: Text("Profile"),
        actions: [
          IconButton(onPressed: (){
          }, icon: Icon(Icons.edit))
        ],
      ),
      body: Center(
          child: FutureBuilder(
              future: bl.GetUserData(context),
              builder: (context,snapshot){
                if(snapshot.connectionState==ConnectionState.waiting){
                  return Center(child: SpinKitHourGlass(color: Colors.white));
                }
                else{
                  return ListView(
                    children: [
                      SizedBox(height: 20,),
                      InkWell(
                          onTap: (){
                            _uploading ? null : _uploadFile;
                          },
                          child: CircleAvatar(
                            child: Icon(Icons.edit),
                            radius: 80,
                          )),
                      SizedBox(height: 20),
                      _uploading
                          ? Column(
                        children: [
                          SpinKitHourGlass(color: Colors.green),
                          // CircularProgressIndicator(value: _uploadProgress),
                          SizedBox(height: 10),
                          Text(
                            'Uploading ${(_uploadProgress * 100).toStringAsFixed(2)}%',
                            style: TextStyle(fontSize: 16),
                          ),
                        ],
                      )
                          : SizedBox(),
                      SizedBox(height: 20),
                      _file != null
                          ? Image.file(
                        _file!,
                        height: 200,
                      )
                          : SizedBox(),
                      SizedBox(height: 20),
                      _filePath.isNotEmpty
                          ? Text(
                        // 'File Path: $_filePath',
                        'File Uploaded Successfully',
                        style: TextStyle(fontSize: 16,color: Colors.green,fontWeight: FontWeight.bold),
                      )
                          : SizedBox(),
                      ReUsableListTile(name,Icons.person_outline),
                      ReUsableListTile(email,Icons.email_outlined),
                      ReUsableListTile(phone,Icons.phone_outlined),
                      ReUsableListTile(address,Icons.location_city_outlined),
                      ReUsableListTile(password,Icons.password),
                    ],
                  );
                }
              })
      ),
    );
  }

  ReUsableListTile(String title,IconData icon) {
    return ListTile(
      title: Text(title),
      leading: Icon(icon),
    );
  }

  ReUsableTextField(mycontroller) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
      child: TextField(
          decoration: InputDecoration(
            enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(14.0)
            ),
          ),controller: mycontroller),
    );
  }

   GetDataFromFireStore() async {
        String? uid = await FirebaseAuth.instance.currentUser?.uid.toString();
        var data = await FirebaseFirestore.instance.collection("Users").doc(uid).get();
        print("User Snapshots Are : ");
        print(data.data());
        setState(() {
          name = data.get("username");
          email = data.get("useremail");
          phone = data.get("userphone");
          address = data.get("useraddress");
          password = data.get("userpassword");
        });
  }


}
