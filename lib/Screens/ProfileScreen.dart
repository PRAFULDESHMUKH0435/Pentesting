import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hive/hive.dart';
import 'package:pentesting/CommonHelper/BusinessLogic.dart';
import 'package:pentesting/Models/UserRegistrationModel.dart';

class ProfileScreen extends StatefulWidget {
   ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  BusinessLogic bl = BusinessLogic();

  List  userdatalist=[];

  TextEditingController usernamecontroller = TextEditingController();

  TextEditingController useremailcontroller = TextEditingController();

  TextEditingController userphonecontroller = TextEditingController();

  TextEditingController useraddresscontroller = TextEditingController();

  TextEditingController userpasswordcontroller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    GetUserData();
    return Scaffold(
      appBar: AppBar(
        title: Text("Profile"),
        actions: [
          IconButton(onPressed: (){
            opendialog();
          }, icon: Icon(Icons.edit))
        ],
      ),
      body: Center(
        child: FutureBuilder(
            future: GetUserData(),
            builder: (context,snapshot){
              if(snapshot.connectionState==ConnectionState.waiting){
                return Center(child: SpinKitHourGlass(color: Colors.white));
              }
              if(snapshot.hasError){
               print("SOMETHING WENT WRONG ${snapshot.error}");
               return ListView(
                 children: [
                   Image.network('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTx-IWZyD_Nm6PWsdDzY8cerKQTmdplpLJfsw&usqp=CAU'),
                 ],
               );
              }else{
                return ListView(
                  children: [
                    SizedBox(height: 20,),
                    CircleAvatar(radius: 80),
                    ReUsableListTile(userdatalist[0].username,Icons.person_outline),
                    ReUsableListTile(userdatalist[0].useremail,Icons.email_outlined),
                    ReUsableListTile(userdatalist[0].userphone,Icons.phone_outlined),
                    ReUsableListTile(userdatalist[0].useraddress,Icons.location_city_outlined),
                    ReUsableListTile(userdatalist[0].userpassword,Icons.password),
                  ],
                );
              }
            })
      ),
    );
  }

  ReUsableListTile(String title,IconData icon) {
    return ListTile(
      title: Text(title),
      leading: Icon(icon),
    );
  }

  void opendialog() {
     usernamecontroller.text=userdatalist[0].username;
     useremailcontroller.text=userdatalist[0].useremail;
     userphonecontroller.text=userdatalist[0].userphone;
     useraddresscontroller.text=userdatalist[0].useraddress;
     userpasswordcontroller.text=userdatalist[0].userpassword;

     showDialog(context: context, builder: (context){
      return AlertDialog(
        title: Text("Update"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircleAvatar(
              radius: 60,
            ),
            SizedBox(height: 8,),
            ReUsableTextField(usernamecontroller),
            ReUsableTextField(useremailcontroller),
            ReUsableTextField(userphonecontroller),
            ReUsableTextField(useraddresscontroller),
            ReUsableTextField(userpasswordcontroller),
          ],
        ),
        actions: [
          OutlinedButton(onPressed: (){
            UpdateUserRegistartionData();
          }, child: Text("Update")),
          OutlinedButton(onPressed: ()=>Navigator.of(context).pop(), child: Text("Cancel")),
        ],
      );
    });
  }

   Future GetUserData() async {
    var box = await Hive.box("UserDataBox");
    print(box);
    userdatalist = box.toMap().values.toList();
    print("Praful ${userdatalist}");
    if(userdatalist.isEmpty){
      UserRegsitrationModel um = new UserRegsitrationModel(
          username: "null",
          useremail: "null",
          userphone: "null",
          useraddress: "null",
          userpassword: "null");
      userdatalist.add(um);
    }
    print("UserDataList Is${userdatalist}");
  }

  ReUsableTextField(mycontroller) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 5.0),
      child: TextField(
        decoration: InputDecoration(
        enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(14.0)
        ),
      ),controller: mycontroller),
    );
  }

  void UpdateUserRegistartionData() {
  }
}
