import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hive/hive.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pentesting/CommonHelper/BusinessLogic.dart';
import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ProfileScreen extends StatefulWidget {
  ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
  List<ImageSource> sources = [ImageSource.camera,ImageSource.gallery];
}

class _ProfileScreenState extends State<ProfileScreen> {
  @override
  void initState() {
    // TODO: implement initState
    GetDataFromFireStore();
    super.initState();
  }

  BusinessLogic bl = BusinessLogic();

  File? _imageFile;
  final picker = ImagePicker();
  final databaseReference = FirebaseDatabase.instance.reference();
  final _usernamecontroller = TextEditingController();
  final _useremailcontroller = TextEditingController();
  final _userphonecontroller = TextEditingController();
  final _useraddressscontroller = TextEditingController();
  final _userpasswordcontroller = TextEditingController();

  String name = "testuser";
  String email = "testuser";
  String phone = "testuser";
  String address = "testuser";
  String password = "testuser";
  bool testuser = false;
  

  @override
  Widget build(BuildContext context) {
    FirebaseAuth.instance.currentUser==null?testuser=true:false;
    print("List From Business Layer Is ${bl.userdatalist}");

    return Scaffold(
      appBar: AppBar(
        title: Text("Profile"),
        actions: [IconButton(onPressed: () {
          openUpdateDialog();
        }, icon: Icon(Icons.edit))],
      ),
      body: ListView(
        children: [
          SizedBox(height: 15,),

          testuser ?
                 Center(
            child: Stack(
              children: [
                CircleAvatar(
                  maxRadius: 60,
                  backgroundImage: NetworkImage("https://cdn.pixabay.com/photo/2018/08/28/12/41/avatar-3637425_640.png"),
                ),
                Positioned(
                    bottom: -10,
                    left: 70,
                    child: IconButton(
                        onPressed: () {
                          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Test User Cannot Upload Image")));
                        },
                        icon: Icon(Icons.add_a_photo)))
              ],
            ),
          )
              :
                 Expanded(
            child: StreamBuilder(
                stream: FirebaseFirestore.instance.collection('Users').doc(FirebaseAuth.instance.currentUser!.uid).snapshots(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData || snapshot.data == null) {
                    return Center(
                        child: Center(child: CircularProgressIndicator())); // Display a loading indicator while data is loading
                  }
                  // Assuming you have a field named 'profile_image' in your Firestore document
                  String? imageUrl = snapshot.data!.get('userimage');

                  if (imageUrl == null || imageUrl.isEmpty) {
                    return CircleAvatar(
                      child: Image.network("https://cdn.pixabay.com/photo/2018/08/28/12/41/avatar-3637425_640.png"),
                      radius: 50,
                    ); // Display a default avatar if the image URL is not available
                  };

                  return Center(
                    child: Stack(
                      children: [
                        CircleAvatar(
                          maxRadius: 60,
                          backgroundImage: NetworkImage(imageUrl),
                        ),
                        Positioned(
                            bottom: -10,
                            left: 70,
                            child: IconButton(
                                onPressed: () {
                                  _pickImage();
                                },
                                icon: Icon(Icons.add_a_photo)))
                      ],
                    ),
                  );
                }),
          ),
          SizedBox(height: 15,),
          ReUsableListTile(name, Icons.person_outline),
          ReUsableListTile(email, Icons.email_outlined),
          ReUsableListTile(phone, Icons.phone_outlined),
          ReUsableListTile(address, Icons.location_city_outlined),
          ReUsableListTile(password, Icons.password),
        ],
      ),
    );
  }

  ReUsableListTile(String title, IconData icon) {
    return ListTile(
      title: Text(title),
      leading: Icon(icon),
    );
  }

  ReUsableTextField(mycontroller) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8.0, vertical: 5.0),
      child: TextField(
          decoration: InputDecoration(
            enabledBorder:
                OutlineInputBorder(borderRadius: BorderRadius.circular(14.0)),
          ),
          controller: mycontroller),
    );
  }

  GetImageFile() async{
    String uid = await FirebaseAuth.instance.currentUser!.uid;
    final ref = await FirebaseFirestore.instance.collection("Users").doc(uid).get();
    _imageFile = await ref.get("userimage");
    final SharedPreferences sp = await SharedPreferences.getInstance();
    sp.setString("imagefilepath", _imageFile!.path.toString());
    print("Image File Is ${_imageFile}");
  }

  Future<void> _pickImage() async {
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    setState(() {
      if (pickedFile != null) {
        _imageFile = File(pickedFile.path);
        _uploadImageToFirebase();
      } else {
        print('No image selected.');
      }
    });
  }


  Future<void> _uploadImageToFirebase() async {
    showDialog(
        barrierDismissible: false,
        context: context,
        builder: (context){
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text("Uploading Image..",style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold,color: Colors.green,decoration: TextDecoration.none),),
            SizedBox(height: 5,),
            SpinKitFadingCube(color: Colors.green),
          ],
        ),
      );
    });
    if (_imageFile == null) return;
    try {
      String uid = await FirebaseAuth.instance.currentUser!.uid;
      final ref = FirebaseStorage.instance
          .ref()
          .child('UserImages')
          .child(uid + '.jpg');

      await ref.putFile(_imageFile!);
      String imageUrl = await ref.getDownloadURL();

      // Update Firestore with the image URL
      FirebaseFirestore.instance.collection('Users').doc(uid).update({
        'userimage': imageUrl,
      });
      print("Image Uploaded Successfully");
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Image uploaded successfully')));
      GetImageFile();
    } catch (e) {
      print("Error While Uploading Image");
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed to upload image')));
    }
    Navigator.pop(context);
  }
  GetDataFromFireStore() async {
    String? uid = await FirebaseAuth.instance.currentUser?.uid.toString();
    var data =
        await FirebaseFirestore.instance.collection("Users").doc(uid).get();
    print("User Snapshots Are : ");
    print(data.data());
    setState(() {
      name = data.get("username");
      email = data.get("useremail");
      phone = data.get("userphone");
      address = data.get("useraddress");
      password = data.get("userpassword");
    });
  }

  Future openUpdateDialog() {
    _usernamecontroller.text=name;
    _useremailcontroller.text=email;
    _userphonecontroller.text=phone;
    _useraddressscontroller.text=address;
    _userpasswordcontroller.text=password;
    return showDialog(context: context, builder: (context){
      return AlertDialog(
        title: Text("Update Data"),
        content:SingleChildScrollView(
          scrollDirection: Axis.vertical,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                margin: EdgeInsets.all(12.0),
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(14.0))),
                    label: Text("UserName"),
                  ),
                  controller:_usernamecontroller,
                  keyboardType: TextInputType.name,
          
                ),
              ),
              Container(
                margin: EdgeInsets.all(12.0),
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(14.0))),
                    label: Text("UserEmail"),
                  ),
                  controller:_useremailcontroller,
                  keyboardType: TextInputType.emailAddress,
          
                ),
              ),
              Container(
                margin: EdgeInsets.all(12.0),
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(14.0))),
                    label: Text("UserPhone"),
                  ),
                  controller:_userphonecontroller,
                  keyboardType: TextInputType.phone,
          
                ),
              ),
              Container(
                margin: EdgeInsets.all(12.0),
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(14.0))),
                    label: Text("UserAddress"),
                  ),
                  controller:_useraddressscontroller,
                  keyboardType: TextInputType.streetAddress,
          
                ),
              ),
              Container(
                margin: EdgeInsets.all(12.0),
                child: TextField(
                  decoration: InputDecoration(
                    border: OutlineInputBorder(borderRadius: BorderRadius.all(Radius.circular(14.0))),
                    label: Text("UserPassword"),
                  ),
                  controller:_userpasswordcontroller,
                  keyboardType: TextInputType.visiblePassword,
          
                ),
              ),
            ],
          ),
        ),
        actions: [
          ElevatedButton(onPressed: ()=>UpdateUserData(), child: Text("Yes",style: TextStyle(color: Colors.green),)),
          ElevatedButton(onPressed: ()=>Navigator.pop(context), child: Text("No",style: TextStyle(color: Colors.green),)),
        ],
      );
    });
  }

  UpdateUserData() async{
    showDialog(context: context, builder: (context){
      return Center(child: SpinKitFoldingCube(color: Colors.green));
    });
    String uid = await FirebaseAuth.instance.currentUser!.uid;
    final firestore = await FirebaseFirestore.instance.collection("Users").doc(uid)
               .update({
                  "username": _usernamecontroller.text.toString().trim(),
                  "useremail": _useremailcontroller.text.toString().trim(),
                  "userphone": _userphonecontroller.text.toString().trim(),
                  "useraddress": _useraddressscontroller.text.toString().trim(),
                  "userpassword": _userpasswordcontroller.text.toString().trim(),
                  "userid": uid
                }).then((value){
                       Navigator.pop(context);
                       Navigator.pop(context);
                       final snackBar = SnackBar(content: Text("User Updated Successfully"));
                       ScaffoldMessenger.of(context).showSnackBar(snackBar);
                       GetDataFromFireStore();
                }).onError((error, stackTrace){
                      final snackBar = SnackBar(content: Text("Error ${error.toString()}"),duration: Duration(seconds: 5),);
                      ScaffoldMessenger.of(context).showSnackBar(snackBar);
               });
  }
}

