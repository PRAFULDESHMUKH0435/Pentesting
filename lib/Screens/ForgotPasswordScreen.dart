import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pentesting/Screens/LoginScreen.dart';

class ForgotPasswordScreen extends StatefulWidget {
  ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
  }


  final _forgotpasscontroller = TextEditingController();
  bool exists = false;
  List<String> emaillist =[];

  String? ForgotPasswordValidator(value){
    if(value?.isEmpty){
      return "Email Address Is Required";
    }
    final bool emailValid =
    RegExp(r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+")
        .hasMatch(value);
    if(!emailValid){
      return "Invalid  Email Address";
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    // SendPasswordResetLink("");
    return Scaffold(
      appBar: AppBar(
        elevation: 2.0,
        title: Text("Forgot Password"),
        backgroundColor: Colors.grey,
      ),

      body: ListView(
        children: [
          SizedBox(
            height: 250,
            child: Lottie.asset('Assets/Animations/Anim_3.json'),
          ),
          Container(
            margin: EdgeInsets.symmetric(horizontal: 8.0,vertical: 25.0),
            child: TextFormField(
              keyboardType: TextInputType.emailAddress,
              controller: _forgotpasscontroller,
              validator: ForgotPasswordValidator,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              decoration:const InputDecoration(
                  suffixIcon: Icon(Icons.email),
                  enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(14.0)),
                      borderSide: BorderSide(color: Colors.white70)
                  ),
                  focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.all(Radius.circular(14.0)),
                      borderSide: BorderSide(color: Colors.green)
                  ),
                  label: Text("Email",style: TextStyle(fontSize: 20,fontWeight: FontWeight.bold)),
                  hintText: "Enter Email Address",
                  filled: true,
                  fillColor: Colors.grey
              ),
            ),
          ),
          InkWell(
            onTap: () async{
              showDialog(
                  barrierDismissible: false,
                  context: context,
                  builder: (context){
                    return Center(child: CircularProgressIndicator());
                  });
               if(_forgotpasscontroller.text.trim().toString().toLowerCase().isNotEmpty){
                 print("Email Address Is ${_forgotpasscontroller.text.trim().toString()}");
                 GetAllEmails(_forgotpasscontroller.text.toString().trim());
                 if(emaillist.contains(_forgotpasscontroller.text.toString().trim())){
                   FirebaseAuth.instance.sendPasswordResetEmail(email: _forgotpasscontroller.text.toString().trim())
                       .then((value){
                         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Password Reset Link Send Successfully")));
                         Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>LoginScreen()), (route) => false);
                         _forgotpasscontroller.clear();
                   });
                 }else{
                   ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("No User Found With Given Email")));
                 }
                 Navigator.pop(context);
                 emaillist.clear();

              }else{
                ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Email Address Is Required ")));
                Navigator.pop(context);
              }
            },
            child: Container(
              margin: EdgeInsets.symmetric(vertical: 5.0,horizontal: 50.0),
              child: Center(child: Text("Send Link ",style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold),)),
              height: 60,
              width: 250,
              decoration: BoxDecoration(
                  color: Colors.greenAccent,
                  borderRadius: BorderRadius.all(Radius.circular(14.0))
              ),
            ),
          ),
        ],
      ),
    );
  }

   GetAllEmails(String email) async{
    final ref = await FirebaseFirestore.instance.collection("Users").get().then((value){
      value.docs.forEach((element) {
        emaillist.add(element.get("useremail"));
      });
      print("EmailList Is ${emaillist}");
    });
  }
}


